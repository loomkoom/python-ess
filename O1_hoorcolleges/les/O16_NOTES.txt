Lus invarianten
    - extra testen voor iteratieve algoritmen

While(I) => Condition(C)
    lus(S)

zorgen dat de lus invariant altijd waar is tussen I en C
=> formeel vs informeel
index > 0
3 > 2


binarysearch:
    start tot end
    en deze gaan samen naar het midden toe

all() vs any()
"Voor all"  "Er bestaat een"   (kwantoren)

selectionsort:
    kleinste element naar voor brengen en steeds een groter gesorteerd stuk hebben

"inductiebewijs"
__Base STEP__

GEG:
    index == 3
    ans == 1
TB:
    ans == numpy.product(range(1,index,2))
B:
    1 == numpy.product(range(1,3,2)) ==> = 1 check

__Inductie Stap__

GEG:
    ans_old == numpy.product(range(1,index_old,2))
    ans == ans_old * index_old
    index == index_old + 2
TB:
    ans == numpy.product(range(1,index,2))
B:
              _____________                                          _____________
    ans_old * | index_old | == numpy.product(range(1,index_old,2)) * | index_old |
              -------------                                          -------------
                                  _________________
    ans == numpy.product(range(1, | index_old + 2 |,2))
                                  -----------------
                                        = index